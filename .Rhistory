setwd C:\Users\Dani\Documents\R\win-library
setwd (C:\Users\Dani\Documents\R\win-library)
[1]  3  1  9  1  7 10 10  2  2  9
library(rpart)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
setwd (C:/Users/DaniDocuments/R/win-library)
train <- read.delim("train.csv", sep=",")
test <- read.delim("test.csv", sep=",")
#Women first
summary(train$Sex)
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "submission0.csv", row.names = FALSE)
#Children and Women first
summary(train$Age)
train$Child <- 0
train$Child[train$Age > 18] <- 1
aggregate(Survived ~ Child + Sex, data=train, FUN=length)
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
# Women and ticket prices
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "submission1.csv", row.names = FALSE)
# Machine learning
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type="class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "submission2.csv", row.names = FALSE)
# Changed parameters
#Takes a long time
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,  method="class", control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit)
# interactive tree
new.fit <- prp(fit,snip=TRUE)$obj
fancyRpartPlot(new.fit)
# Random Forest
sample(1:10, replace = TRUE)
[1]  3  1  9  1  7 10 10  2  2  9
install.packages(c("rattle", "rpart.plot", "RColorBrewer"))
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
setwd (C:/Users/DaniDocuments/R/win-library)
train <- read.delim("train.csv", sep=",")
test <- read.delim("test.csv", sep=",")
#Women first
summary(train$Sex)
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "submission0.csv", row.names = FALSE)
#Children and Women first
summary(train$Age)
train$Child <- 0
train$Child[train$Age > 18] <- 1
aggregate(Survived ~ Child + Sex, data=train, FUN=length)
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
# Women and ticket prices
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "submission1.csv", row.names = FALSE)
# Machine learning
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type="class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "submission2.csv", row.names = FALSE)
# Changed parameters
#Takes a long time
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,  method="class", control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit)
# interactive tree
new.fit <- prp(fit,snip=TRUE)$obj
fancyRpartPlot(new.fit)
# Random Forest
sample(1:10, replace = TRUE)
[1]  3  1  9  1  7 10 10  2  2  9
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
setwd (C:/Users/DaniDocuments/R/win-library)
train <- read.delim("train.csv", sep=",")
test <- read.delim("test.csv", sep=",")
#Women first
summary(train$Sex)
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "submission0.csv", row.names = FALSE)
#Children and Women first
summary(train$Age)
train$Child <- 0
train$Child[train$Age > 18] <- 1
aggregate(Survived ~ Child + Sex, data=train, FUN=length)
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
# Women and ticket prices
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "submission1.csv", row.names = FALSE)
# Machine learning
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type="class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "submission2.csv", row.names = FALSE)
# Changed parameters
#Takes a long time
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,  method="class", control=rpart.control(minsplit=2, cp=0.001))
fancyRpartPlot(fit)
# interactive tree
new.fit <- prp(fit,snip=TRUE)$obj
fancyRpartPlot(new.fit)
# Random Forest
sample(1:10, replace = TRUE)
[1]  3  1  9  1  7 10 10  2  2  9
setwd(C:/Users/DaniDocuments/R/win-library)
setwd("C:/Users/DaniDocuments/R/win-library")
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
setwd("C:/Users/DaniDocuments/R/dataset")
setwd("C:/Users/DaniDocuments/R/dataset")
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
load("~/Data_Animals/Jambo_Bukoba/Merge_ExternalData/allmerged.csv")
load("~/Data_Animals/Jambo_Bukoba/Merge_ExternalData/PSLE2013_RANKING.csv")
#######################
# MergerCode
# Written by Christopher and Ben
# Last edit 2015-8-18 by Ben
#######################
library(stringr)
library(plyr)
library(dplyr)
library(zoo)
# Open MASTER
MASTER <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/MASTER.csv", stringsAsFactors = FALSE, header = TRUE, sep=";") # Import with no header
# Open the external data
PSLE2012_RANKING <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/PSLE2012_RANKING.csv", stringsAsFactors = FALSE, header = TRUE, sep = ";") # Import with no header
PSLE2013_RANKING <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/PSLE2013_RANKING.csv", stringsAsFactors = FALSE, header = TRUE, sep = ";") # Import with no header
PSLE2014_RANKING <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/PSLE2014_RANKING.csv", stringsAsFactors = FALSE, header = TRUE, sep = ";") # Import with no header
# Clean the external data
PSLE2012_RANKING$CENTRE.CODE <- str_replace_all(PSLE2012_RANKING$CENTRE.CODE, "-", "")
PSLE2012_RANKING$CENTRE.CODE <- str_replace_all(PSLE2012_RANKING$CENTRE.CODE, "S", "")
PSLE2013_RANKING$CENTRE.CODE <- str_replace_all(PSLE2013_RANKING$CENTRE.CODE, "-", "")
PSLE2013_RANKING$CENTRE.CODE <- str_replace_all(PSLE2013_RANKING$CENTRE.CODE, "S", "")
PSLE2014_RANKING$CENTRE.CODE <- str_replace_all(PSLE2014_RANKING$CENTRE.CODE, "-", "")
PSLE2014_RANKING$CENTRE.CODE <- str_replace_all(PSLE2014_RANKING$CENTRE.CODE, "S", "")
# Add years to the external data
PSLE2012_RANKING$year <- 2012
PSLE2013_RANKING$year <- 2013
PSLE2014_RANKING$year <- 2014
# Rename Centre.Code into schoolcode
PSLE2012_RANKING <- rename(PSLE2012_RANKING, c("CENTRE.CODE" = "schoolcode"))
PSLE2013_RANKING <- rename(PSLE2013_RANKING, c("CENTRE.CODE" = "schoolcode"))
PSLE2014_RANKING <- rename(PSLE2014_RANKING, c("CENTRE.CODE" = "schoolcode"))
# Sort the Datasets
PSLE2012_RANKING <- PSLE2012_RANKING[with(PSLE2012_RANKING, order(PSLE2012_RANKING$schoolcode)),]
PSLE2013_RANKING <- PSLE2013_RANKING[with(PSLE2013_RANKING, order(PSLE2013_RANKING$schoolcode)),]
PSLE2014_RANKING <- PSLE2014_RANKING[with(PSLE2014_RANKING, order(PSLE2014_RANKING$schoolcode)),]
# Merge
MERGED <- join(MASTER, PSLE2014_RANKING, by= c("year", "schoolcode"))
MERGED <- join(MERGED, PSLE2013_RANKING, by= c("year", "schoolcode"))
MERGED <- join(MERGED, PSLE2012_RANKING, by= c("year", "schoolcode"))
# Sort by year
MERGED <- MERGED[with(MERGED, order(MERGED$year, MERGED$schoolcode)),]
###### Save file
write.table(MERGED, file = "C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/Attempt.csv", sep=";", row.names=TRUE)
write.table(MERGED, "C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/Attempt.txt", sep="/t")
library(xlsx)
write.xlsx(MERGED, "C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/Attempt.xlsx")
#################### Miscellaneous
# 1. PSLE2012_RANKING fehlt "Region.Name" als Variable. Es hat dafÃ¼r aber "Clean Last Year", "Passed Last Year" und "Percent Pass Last Year"
# 2. PSLExxxx_Ranking = PSLExxxx_Improvement, abgesehen davon dass % changes 2 Dezimalstellen hat
# 3. Unten findet ihr, wie ihr die einzige Variable, die PSLE2014_RANKING hat, die PSLE2014_IMPROVEMENT nicht hat, ausfinding machen kÃ¶nnt
# Find the one variable difference of PSLE2014_RANKING/IMPROVEMENT
#require(dplyr)
#AJ <- anti_join(PSLE2014_RANKING, PSLE2014_IMPROVEMENT)
#schoolcode P1201046
### MERGE - Big
#MERGED2013 <- join (PSLE2013_RANKING, PSLE2013_IMPROVEMENT, by= c("year", "schoolcode"))
#MERGED2014 <- join (PSLE2014_RANKING, PSLE2014_IMPROVEMENT, by= c("year", "schoolcode"))
# Find out which row number AJ has
#which(grepl(1201046, MERGED2014$schoolcode))
# Display row with AJ
#MERGED2014[7864,]
###
#######################
# MergerCode
# Written by Christopher and Ben
# Last edit 2015-8-18 by Ben
#######################
library(stringr)
library(plyr)
library(dplyr)
library(zoo)
# Open MASTER
MASTER <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/MASTER.csv", stringsAsFactors = FALSE, header = TRUE, sep=";") # Import with no header
PSLE2012_RANKING <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/PSLE2012_RANKING.csv", stringsAsFactors = FALSE, header = TRUE, sep = ";") # Import with no header
PSLE2013_RANKING <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/PSLE2013_RANKING.csv", stringsAsFactors = FALSE, header = TRUE, sep = ";") # Import with no header
PSLE2014_RANKING <- read.csv("C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/PSLE2014_RANKING.csv", stringsAsFactors = FALSE, header = TRUE, sep = ";") # Import with no header
# Clean the external data
PSLE2012_RANKING$CENTRE.CODE <- str_replace_all(PSLE2012_RANKING$CENTRE.CODE, "-", "")
PSLE2012_RANKING$CENTRE.CODE <- str_replace_all(PSLE2012_RANKING$CENTRE.CODE, "S", "")
PSLE2013_RANKING$CENTRE.CODE <- str_replace_all(PSLE2013_RANKING$CENTRE.CODE, "-", "")
PSLE2013_RANKING$CENTRE.CODE <- str_replace_all(PSLE2013_RANKING$CENTRE.CODE, "S", "")
PSLE2014_RANKING$CENTRE.CODE <- str_replace_all(PSLE2014_RANKING$CENTRE.CODE, "-", "")
PSLE2014_RANKING$CENTRE.CODE <- str_replace_all(PSLE2014_RANKING$CENTRE.CODE, "S", "")
# Add years to the external data
PSLE2012_RANKING$year <- 2012
PSLE2013_RANKING$year <- 2013
PSLE2014_RANKING$year <- 2014
# Rename Centre.Code into schoolcode
PSLE2012_RANKING <- rename(PSLE2012_RANKING, c("CENTRE.CODE" = "schoolcode"))
View(PSLE2012_RANKING)
?rename
PSLE2012_RANKING <- rename(PSLE2012_RANKING, "CENTRE.CODE" = "schoolcode")
PSLE2012_RANKING <- rename(PSLE2012_RANKING, CENTRE.CODE = schoolcode)
PSLE2012_RANKING <- rename(PSLE2012_RANKING, schoolcode = CENTRE.CODE)
View(PSLE2012_RANKING)
PSLE2012_RANKING <- rename(PSLE2012_RANKING, schoolcode = CENTRE.CODE)
PSLE2013_RANKING <- rename(PSLE2013_RANKING, schoolcode = CENTRE.CODE)
PSLE2014_RANKING <- rename(PSLE2014_RANKING, schoolcode = CENTRE.CODE)
View(PSLE2013_RANKING)
View(PSLE2014_RANKING)
PSLE2012_RANKING <- PSLE2012_RANKING[with(PSLE2012_RANKING, order(PSLE2012_RANKING$schoolcode)),]
PSLE2013_RANKING <- PSLE2013_RANKING[with(PSLE2013_RANKING, order(PSLE2013_RANKING$schoolcode)),]
PSLE2014_RANKING <- PSLE2014_RANKING[with(PSLE2014_RANKING, order(PSLE2014_RANKING$schoolcode)),]
MERGED <- join(MASTER, PSLE2014_RANKING, by= c("year", "schoolcode"))
MERGED <- join(MERGED, PSLE2013_RANKING, by= c("year", "schoolcode"))
MERGED <- join(MERGED, PSLE2012_RANKING, by= c("year", "schoolcode"))
MERGED <- MERGED[with(MERGED, order(MERGED$year, MERGED$schoolcode)),]
###### Save file
write.table(MERGED, file = "C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/Attempt.csv", sep=";", row.names=TRUE)
write.table(MERGED, "C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/Attempt.txt", sep="/t")
library(xlsx)
write.xlsx(MERGED, "C:/Users/Dani/Documents/Data_Animals/Jambo_Bukoba/Merge_ExternalData/Attempt.xlsx")
#################### Miscellaneous
# 1. PSLE2012_RANKING fehlt "Region.Name" als Variable. Es hat dafÃ¼r aber "Clean Last Year", "Passed Last Year" und "Percent Pass Last Year"
library(xlsx)
install.packages("rio")
install.packages("heaven")
install.packages("dplyr")
install.packages("shiny")
install.packages("leaflet")
install.packages("httr")
install.packages("dplyr")
install.packages("XML")
install.packages("maptools)
install.packages("sp")
install.packages("rgdal"")
install.packages("gsubfn)
install.packages("maptools")
install.packages("sp")
install.packages("rgdal")
install.packages("gsubfn)
install.packages("gsubfn")
help update
library(RJSONIO)
library(WDI)
WDI_search <- WDIsearch(string = "unemployment", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "exports", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_dat <- WDI(country = c("US", "DE", "JP", "GB"), indicator = c("BM.AG.AGR.TRAC.NO"), start = 2001, end = 2014)
#ggplot2
WDI_dat <- WDI(country = c("US", "DE", "JP", "GB"), indicator = c("BM.AG.CREL.CD"), start = 2001, end = 2014)
WDI_dat <- WDI(country = c("US", "DE", "JP", "GB"), indicator = c("TX.VAL.TECH.MF.ZS"), start = 2001, end = 2014)
View(WDI_dat)
TEN <- read.csv("MaritimePiracyTennessee.csv", stringsAsFactors = FALSE, header = TRUE, sep = ",")
TEN <- read.csv("MaritimePiracyTennessee", stringsAsFactors = FALSE, header = TRUE, sep = ",")
getwd
getwd()
try(setwd("C:/Users/Dani/Documents/GitHub/MaritimePiracyWrangling")
getwd()
try(setwd("C:/Users/Dani/Documents/GitHub/MaritimePiracyWrangling"))
TEN <- read.csv("MaritimePiracyTennessee.csv", stringsAsFactors = FALSE, header = FALSE, sep = ";")
TEN <- read.csv("MaritimePiracyTennessee", stringsAsFactors = FALSE, header = FALSE, sep = ";")
getwd()
MaritimePiracyTennessee.csv <- read.csv2("~/GitHub/MaritimePiracyWrangling/MaritimePiracyTennessee.csv.csv", stringsAsFactors=FALSE)
View(MaritimePiracyTennessee.csv)
View(MaritimePiracyTennessee.csv)
library(RJSONIO)
library(WDI)
WDI_search <- WDIsearch(string = "unemployment", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "debt", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "trade balance", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "GDP", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "debt", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "GDP", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "trade balance", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "ease of doing business", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "foreign direct investment", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "population growth", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "population growth", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "poverty", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "inflation", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "school", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "school enrollment", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "education", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "labor force participation rate", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
WDI_search <- WDIsearch(string = "vulnerable", field = "name", short = TRUE, cache = NULL)
View(WDI_search)
